---
# File:

- name: delete ansible test user {{ aws_ansible_test_user }}
  iam:
    name: "{{ aws_ansible_test_user }}"
    iam_type: user
    state: absent
    profile: "{{ aws_admin_user }}"

- name: delete ansible test group {{ aws_ansible_test_user }}
  iam_group:
    name: "{{ aws_ansible_test_user }}"
    state: absent
    profile: "{{ aws_admin_user }}"

- name: create ansible test group {{ aws_ansible_test_user }}
  iam_group:
    name: "{{ aws_ansible_test_user }}"
    managed_policy:
      - arn:aws:iam::aws:policy/AdministratorAccess
    state: present
    profile: "{{ aws_admin_user }}"

- name: create ansible test user {{ aws_ansible_test_user }} and keys
  iam:
    name: "{{ aws_ansible_test_user }}"
    iam_type: user
    state: present
    access_key_state: create
    groups: "{{ aws_ansible_test_user }}"
    profile: "{{ aws_admin_user }}"
  register: ansible_test_user_access_keys

- debug:
    var: ansible_test_user_access_keys

- name: get an aws session token
  sts_session_token:
    profile: "{{ aws_admin_user }}"
    region: "{{ aws_test_region }}"
  register: ansible_test_user_session_token

- debug:
    var: ansible_test_user_session_token

# TODO: add session token to bash environment variables

- name: create working cloud config aws file from template
  shell: cp ~/ansible/test/integration/cloud-config-aws.yml.template ~/ansible/test/integration/cloud-config-aws.yml

# TODO: modify template with security token details

# TODO: source hacking/env-setup

- name: configure ansible for test user
  shell: "ansible-playbook ~/ansible/hacking/aws_config/setup-iam.yml -e iam_group={{ aws_ansible_test_user }} -e profile={{ aws_admin_user }} -e region=${{ aws_test_region }}"
